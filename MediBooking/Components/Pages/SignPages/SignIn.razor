@page "/signin"
@using MediBooking.Enums
@using MediBooking.Services.AuthenticationServices
@using MediBooking.Services.AuthorizationServices
@using MediBooking.Models
@using MediBooking.Services.TrackingService
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IAuthenticationService AuthenticationService
@inject IAuthorizationService AuthorizationService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage LocalStorage


<h3>Είσοδος</h3>
<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button class="btn btn-primary" type="submit">Login</button>
    <div class="text-start mt-2">
        <button class="btn btn-secondary mb-3" @onclick="NavigateHome">
            ⬅ Επιστροφή στην Αρχική
        </button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="mt-2 alert alert-info">@message</div>
}

@code {
    private LoginModel loginModel = new();
    private string message;

    private void NavigateHome()
    {
        NavigationManager.NavigateTo("/");
    }
    private async Task HandleLogin()
    {
        var isValid = await AuthenticationService.IsUserAuthenticated(loginModel.Username, loginModel.Password);
        if (isValid)
        {
            var user = AuthorizationService.GetCurrentUser(loginModel.Username);
            var token = await SessionService.CreateSession(user.Username);

            // Save user info locally
            await LocalStorage.SetAsync("currentUser", user);

            message = $"Welcome, {user.FirstName} ({user.UserRole})!";

            // Redirect straight to create appointment after login (instead of dashboard)
            NavigationManager.NavigateTo("/appointments/create");
        }
        else
        {
            message = "Invalid username or password.";
        }
    }
    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
