@page "/users/edit/{id:int}"
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@using MediBooking.Models
@using MediBooking.Services.UserServices
@using MediBooking.UserServices
@using Microsoft.AspNetCore.Components.Forms

<h3>Edit User</h3>

@if (user == null)
{
    <p><em>Loading user data...</em></p>
}
else
{
    <EditForm Model="user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">First Name</label>
            <InputText class="form-control" @bind-Value="user.FirstName" />
        </div>

        <div class="mb-3">
            <label class="form-label">Last Name</label>
            <InputText class="form-control" @bind-Value="user.LastName" />
        </div>

        <div class="mb-3">
            <label class="form-label">Location</label>
            <InputText class="form-control" @bind-Value="user.Location" />
        </div>

        <div class="mb-3">
            <label class="form-label">Profile Picture</label>
            <InputFile OnChange="HandleImageUpload" />
        </div>

        @if (!string.IsNullOrEmpty(user.ProfilePicture))
        {
            <div class="mb-3">
                <img src="@user.ProfilePicture" alt="Profile Picture" width="150" />
            </div>
        }

        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
        @if (!string.IsNullOrEmpty(user.ProfilePicture))
        {
            <div class="mb-3">
                <button type="button" class="btn btn-danger btn-sm" @onclick="DeleteProfilePicture">Delete Picture</button>
            </div>
        }
    </EditForm>
}
@code {
    [Parameter] public int id { get; set; }
    private User user;

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserById(id);
    }

    private async Task HandleValidSubmit()
    {
        var result = await UserService.UpdateUser(user);
        if (result)
        {
            NavigationManager.NavigateTo("/users");
        }
        else
        {
            Console.WriteLine("Update failed.");
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var uploadsFolder = Path.Combine(Environment.WebRootPath, "uploads");
            Directory.CreateDirectory(uploadsFolder);

            var fileName = $"{Guid.NewGuid()}_{file.Name}";
            var filePath = Path.Combine(uploadsFolder, fileName);

            await using var fs = new FileStream(filePath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);

            user.ProfilePicture = $"/uploads/{fileName}";
        }
    }


    private void GoBack()
    {
        NavigationManager.NavigateTo("/users");
    }

    private void DeleteProfilePicture()
    {
        if (!string.IsNullOrEmpty(user.ProfilePicture))
        {
            var filePath = Path.Combine(Environment.WebRootPath, user.ProfilePicture.TrimStart('/'));
            if (System.IO.File.Exists(filePath))
            {
                System.IO.File.Delete(filePath);
            }

            user.ProfilePicture = null;
        }
    }

}
